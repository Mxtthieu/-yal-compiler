package yal.analyse ;

import java.util.*;
import yal.arbre.* ;
import yal.arbre.expressions.* ;
import yal.arbre.instructions.* ;
import yal.exceptions.AnalyseSyntaxiqueException;
import yal.analyse.symbol.*;
import yal.analyse.entre.*;
import yal.arbre.expressions.binaire.operateur.logique.*;
import yal.arbre.expressions.binaire.operateur.comparaison.*;
import yal.arbre.expressions.binaire.operateur.arithmetique.*;
import yal.arbre.expressions.unaire.*;





import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)
                    m.append(" colonne : " + (s.right+1)) ;

            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, ECRIRE, EGAL, LIRE ;
terminal Symbol    SI, ALORS, SINON, FINSI, TANTQUE, REPETER, FINTANTQUE ;
terminal Symbol    PLUS, MOINS, MULTIPLICATION, DIVISION, PAROUVR, PARFER ;
terminal Symbol    EGALITE, DIFFERENT, INFERIEUR, SUPERIEUR, ET, OU, NON ;
terminal String    IDF, CSTENTIERE, TYPE ;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG;
non terminal BlocDInstructions LINST, LDECL;
non terminal Expression EXP, OPER ;
non terminal Instruction INST, DECL, DECL_VAR, AFFECTATION, ECRITURE, LECTURE, BOUCLE, CONDITION ;

/* Precedences */
precedence left OU;
precedence left ET;
precedence left NON;
precedence left INFERIEUR, SUPERIEUR;
precedence left EGALITE, DIFFERENT;
precedence left PLUS, MOINS;
precedence left MULTIPLICATION, DIVISION;


/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=     PROGRAMME  IDF  DEBUT  LINST:li  FIN
                {: RESULT = li ; :}

        |
                PROGRAMME  IDF  DEBUT  LDECL LINST:li  FIN
                {: RESULT = li ; :}
                ;

LINST   ::=     LINST:li  INST:i
                {: li.ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

INST    ::=     AFFECTATION:a
                {: RESULT = a ; :}
        |
                BOUCLE:b
                {: RESULT = b ; :}
        |
                CONDITION:c
                {: RESULT = c ; :}
        |
                ECRITURE:e
                {: RESULT = e ; :}
        |
                LECTURE:l
                {: RESULT = l ; :}
                ;

LDECL   ::=     LDECL:ld  DECL:d
                {: if (d !=null) { ld.ajouter(d) ;}
                   RESULT = ld ; :}
        |
                DECL:d
                {: BlocDInstructions ld = new BlocDInstructions(dleft + 1) ;
                   if (d !=null) { ld.ajouter(d) ;}
                   RESULT = ld ; :}
                ;

DECL    ::=     DECL_VAR:dv
                {: RESULT = dv ; :}
                ;

DECL_VAR ::=    TYPE:t IDF:i POINTVIRGULE
                {: EntreeVar e = new EntreeVar(i);
                   Symbole s = new SymboleEntier();
                   TDS.getInstance().ajouter(e, s) ; :}
                ;
                   
AFFECTATION ::= IDF:i EGAL EXP:e POINTVIRGULE
                {: RESULT = new Affectation(i, e) ; :}
                ;

BOUCLE ::= TANTQUE EXP:e REPETER LINST:li FINTANTQUE
                {: RESULT = new Boucle(e, li) ; :}
                ;

CONDITION ::= SI EXP:e ALORS FINSI
                {: RESULT = new Condition(e) ; :}
          |
              SI EXP:e ALORS LINST:li FINSI
                {: RESULT = new Condition(e, li, 0) ; :}

          |
              SI EXP:e ALORS SINON LINST:li FINSI
                {: RESULT = new Condition(e, li, 1) ; :}
          |
              SI EXP:e ALORS LINST:la SINON LINST:ls FINSI
                {: RESULT = new Condition(e, la, ls) ; :}
                ;

ECRITURE    ::= ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
                ;

LECTURE    ::= LIRE IDF:i POINTVIRGULE
                {: RESULT = new Lire(i, ileft + 1) ; :}
                ;
    
EXP    ::=     CSTENTIERE:c
                {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
        |
               IDF:i
               {: RESULT = new Variable(i, ileft + 1); :}
        |
               PAROUVR EXP:e PARFER
               {: RESULT = e; :}
        |
               NON EXP:e
               {: RESULT = new NonLogique(e); :}
        |
               MOINS EXP:e
               {: RESULT = new Negation(e); :}
        |
               EXP:eg PLUS EXP:ed
               {: RESULT = new Plus(eg, ed); :}
        |
               EXP:eg MOINS EXP:ed
               {: RESULT = new Moins(eg, ed); :}
        |
               EXP:eg MULTIPLICATION EXP:ed
               {: RESULT = new Multiplier(eg, ed); :}
        |
               EXP:eg DIVISION EXP:ed
               {: RESULT = new Diviser(eg, ed); :}
        |
               EXP:eg EGALITE EXP:ed
               {: RESULT = new Egalite(eg, ed); :}
        |
               EXP:eg SUPERIEUR EXP:ed
               {: RESULT = new Superieur(eg, ed); :}
        |
               EXP:eg INFERIEUR EXP:ed
               {: RESULT = new Inferieur(eg, ed); :}
        |
               EXP:eg DIFFERENT EXP:ed
               {: RESULT = new Different(eg, ed); :}
        |
               EXP:eg ET EXP:ed
               {: RESULT = new EtLogique(eg, ed); :}
        |
               EXP:eg OU EXP:ed
               {: RESULT = new OuLogique(eg, ed); :}
               ;